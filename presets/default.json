{
  "name": "default",
  "description": "Default preset for general-purpose code analysis",

  "extensions": {
    ".c": 1.0,
    ".h": 0.9,
    ".cpp": 1.0,
    ".hpp": 0.9,
    ".cc": 1.0,
    ".go": 1.2,
    ".rs": 1.2,
    ".sol": 1.3,
    ".vy": 1.3,
    ".cairo": 1.3,
    ".move": 1.3,
    ".ts": 1.0,
    ".tsx": 1.0,
    ".js": 0.9,
    ".jsx": 0.9,
    ".py": 1.0,
    ".java": 0.9,
    ".cs": 0.8,
    ".toml": 0.5,
    ".json": 0.4,
    ".yml": 0.5,
    ".yaml": 0.5,
    ".ini": 0.4,
    ".md": 0.1
  },

  "path_boosts": [
    {
      "pattern": "(^|/)(src|lib|pkg|internal|core|server|api|cmd)(/|$)",
      "weight": 0.6,
      "description": "Core source directories"
    },
    {
      "pattern": "(^|/)(contracts?)(/|$)",
      "weight": 0.8,
      "description": "Smart contract directories"
    },
    {
      "pattern": "(^|/)(app|router|handler|controller|service|models?)(/|$)",
      "weight": 0.4,
      "description": "Application logic directories"
    }
  ],

  "path_penalties": [
    {
      "pattern": "(^|/)(tests?|__tests__|testdata|spec|mocks?|fixtures?)(/|$)",
      "weight": -1.5,
      "description": "Test directories"
    },
    {
      "pattern": "(^|/)(examples?|samples?|demos?|docs?)(/|$)",
      "weight": -0.6,
      "description": "Example and documentation directories"
    },
    {
      "pattern": "(^|/)(scripts?|ci|\\.github|doc)(/|$)",
      "weight": -0.3,
      "description": "Build and CI directories"
    }
  ],

  "config_top_files": [
    "Dockerfile",
    "docker-compose.yml",
    "Makefile",
    "Cargo.toml",
    "Cargo.lock",
    "go.mod",
    "go.sum",
    "package.json",
    "pnpm-lock.yaml",
    "yarn.lock"
  ],

  "entrypoint_patterns": [
    "(^|/)cmd/[^/]+/main\\.go$",
    "(^|/)main\\.go$",
    "(^|/)src/main\\.rs$",
    "(^|/)src/main\\.(ts|tsx|js|jsx)$"
  ],

  "filter_focus": "Choose the most security-relevant files across the project: core logic, state management, authentication, interfaces, and important configs. Avoid tests/mocks/fixtures unless they contain unique logic. Prefer spread across critical components.",

  "graphs": {
    "required": [
      "Data flow graph showing how information moves through the system, tracking transformations and dependencies",
      "Access control and permission model showing authorization boundaries and privilege levels"
    ]
  },

  "audit_prompts": {
    "sweep_mode": {
      "investigation_guidelines": "Focus on achieving broad coverage of unvisited components. Prioritize components handling critical state or permissions. Look for common vulnerability patterns. Avoid repeating completed investigations.",
      "vulnerability_focus": "Look for ALL types of vulnerabilities in components including: missing validation, access control issues, overflow vulnerabilities, reentrancy, logic errors, state corruption, and authentication bypasses."
    },
    "intuition_mode": {
      "key_targets": [
        "VALUE AT RISK: Where can money be stolen or locked?",
        "CONTRADICTIONS: What doesn't match between docs and code?",
        "AUTH BYPASSES: Where might permission checks fail?",
        "STATE CORRUPTION: What could break critical invariants?"
      ],
      "target_areas": [
        "Value transfer mechanisms and payment flows",
        "Clear contradictions in the annotated graphs",
        "Suspicious permission check patterns",
        "Complex cross-component value interactions",
        "Areas that 'feel' vulnerable based on patterns"
      ],
      "vulnerability_focus": "Prioritize MONETARY IMPACT above all else. Look for: theft vulnerabilities, fund locking, authorization bypasses, invariant violations, and high-confidence exploitable bugs."
    },
    "deep_analysis": {
      "critical_checks": [
        "Base analysis on investigation goal and exploration/history shown in context",
        "Surface ANY vulnerabilities that can be justified from provided context",
        "Propose hypothesis only if ROOT CAUSE is explicitly evidenced in provided code",
        "Cite specific files/functions in Affected Code with exact node IDs from graphs",
        "Verify that required preconditions are plausible given the code",
        "Check for guards/require/reentrancy/permissions that would mitigate issues",
        "Lower confidence to low or omit hypothesis if evidence is weak or ambiguous",
        "Prefer fewer, higher-quality hypotheses over speculative ones"
      ],
      "vulnerability_types": [
        "Missing validation vulnerabilities",
        "Access control and authorization issues",
        "Overflow and underflow vulnerabilities",
        "Reentrancy vulnerabilities",
        "Logic errors and edge cases",
        "State corruption vulnerabilities",
        "Authentication bypass vulnerabilities",
        "Value theft and fund locking issues",
        "Invariant violations",
        "Cross-component interaction vulnerabilities"
      ]
    }
  }
}