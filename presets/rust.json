{
  "name": "rust",
  "description": "Preset optimized for Rust codebase analysis",

  "extensions": {
    ".rs": 1.5,
    ".toml": 0.6,
    ".md": 0.1
  },

  "path_boosts": [
    {
      "pattern": "(^|/)src(/|$)",
      "weight": 0.8,
      "description": "Source directory"
    },
    {
      "pattern": "(^|/)src/main\\.rs$",
      "weight": 1.0,
      "description": "Main entry point"
    },
    {
      "pattern": "(^|/)src/lib\\.rs$",
      "weight": 0.9,
      "description": "Library root"
    },
    {
      "pattern": "(^|/)(core|protocol|runtime)(/|$)",
      "weight": 0.7,
      "description": "Core functionality"
    }
  ],

  "path_penalties": [
    {
      "pattern": "(^|/)tests?(/|$)",
      "weight": -1.8,
      "description": "Test directories"
    },
    {
      "pattern": "(^|/)benches(/|$)",
      "weight": -1.5,
      "description": "Benchmark directories"
    },
    {
      "pattern": "(^|/)examples(/|$)",
      "weight": -0.8,
      "description": "Example directories"
    },
    {
      "pattern": "/test[s_]",
      "weight": -1.2,
      "description": "Test modules"
    }
  ],

  "config_top_files": [
    "Cargo.toml",
    "Cargo.lock"
  ],

  "entrypoint_patterns": [
    "(^|/)src/main\\.rs$",
    "(^|/)src/lib\\.rs$"
  ],

  "security_focus": "Identify the most critical code for security review. Focus on: unsafe blocks, public APIs, FFI boundaries, parser/deserializer code, cryptographic operations, and privileged operations. Pay special attention to code handling untrusted input or performing memory-unsafe operations.",

  "graphs": {
    "primary": "SystemArchitecture",
    "required": [
      "Unsafe code graph mapping all unsafe blocks, raw pointer usage, and FFI boundaries with their safety invariants and assumptions",
      "Public API surface graph showing all publicly exposed functions, types, and their trust boundaries",
      "Data flow graph for untrusted input showing how external data enters the system and where it's validated or sanitized"
    ],
    "default_additional": 2
  }
}